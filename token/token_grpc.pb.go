// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package tokenpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TokenClient is the client API for Token service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TokenClient interface {
	// hot页
	SubscribeHot(ctx context.Context, in *SubscribeHotRequest, opts ...grpc.CallOption) (Token_SubscribeHotClient, error)
	// 上新， 订阅
	SubscribeNewPair(ctx context.Context, in *SubscribeNewPairRequest, opts ...grpc.CallOption) (Token_SubscribeNewPairClient, error)
	// 上新，查询
	GetNewPair(ctx context.Context, in *GetNewPairRequest, opts ...grpc.CallOption) (*GetNewPairResponse, error)
	// 搜索
	SearchToken(ctx context.Context, in *SearchTokenRequest, opts ...grpc.CallOption) (*SearchTokenResponse, error)
	// for block-parser
	OnNewToken(ctx context.Context, in *OnNewTokenRequest, opts ...grpc.CallOption) (*OnNewTokenResponse, error)
	// for block-parser
	OnPairSync(ctx context.Context, in *OnPairSyncRequest, opts ...grpc.CallOption) (*OnPairSyncResponse, error)
	// for engine
	OnTokenPriceChanged(ctx context.Context, in *OnTokenPriceChangedRequest, opts ...grpc.CallOption) (*OnTokenPriceChangedResponse, error)
}

type tokenClient struct {
	cc grpc.ClientConnInterface
}

func NewTokenClient(cc grpc.ClientConnInterface) TokenClient {
	return &tokenClient{cc}
}

func (c *tokenClient) SubscribeHot(ctx context.Context, in *SubscribeHotRequest, opts ...grpc.CallOption) (Token_SubscribeHotClient, error) {
	stream, err := c.cc.NewStream(ctx, &Token_ServiceDesc.Streams[0], "/token.api.Token/SubscribeHot", opts...)
	if err != nil {
		return nil, err
	}
	x := &tokenSubscribeHotClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Token_SubscribeHotClient interface {
	Recv() (*SubscribeHotResponse, error)
	grpc.ClientStream
}

type tokenSubscribeHotClient struct {
	grpc.ClientStream
}

func (x *tokenSubscribeHotClient) Recv() (*SubscribeHotResponse, error) {
	m := new(SubscribeHotResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tokenClient) SubscribeNewPair(ctx context.Context, in *SubscribeNewPairRequest, opts ...grpc.CallOption) (Token_SubscribeNewPairClient, error) {
	stream, err := c.cc.NewStream(ctx, &Token_ServiceDesc.Streams[1], "/token.api.Token/SubscribeNewPair", opts...)
	if err != nil {
		return nil, err
	}
	x := &tokenSubscribeNewPairClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Token_SubscribeNewPairClient interface {
	Recv() (*SubscribeNewPairResponse, error)
	grpc.ClientStream
}

type tokenSubscribeNewPairClient struct {
	grpc.ClientStream
}

func (x *tokenSubscribeNewPairClient) Recv() (*SubscribeNewPairResponse, error) {
	m := new(SubscribeNewPairResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tokenClient) GetNewPair(ctx context.Context, in *GetNewPairRequest, opts ...grpc.CallOption) (*GetNewPairResponse, error) {
	out := new(GetNewPairResponse)
	err := c.cc.Invoke(ctx, "/token.api.Token/GetNewPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenClient) SearchToken(ctx context.Context, in *SearchTokenRequest, opts ...grpc.CallOption) (*SearchTokenResponse, error) {
	out := new(SearchTokenResponse)
	err := c.cc.Invoke(ctx, "/token.api.Token/SearchToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenClient) OnNewToken(ctx context.Context, in *OnNewTokenRequest, opts ...grpc.CallOption) (*OnNewTokenResponse, error) {
	out := new(OnNewTokenResponse)
	err := c.cc.Invoke(ctx, "/token.api.Token/OnNewToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenClient) OnPairSync(ctx context.Context, in *OnPairSyncRequest, opts ...grpc.CallOption) (*OnPairSyncResponse, error) {
	out := new(OnPairSyncResponse)
	err := c.cc.Invoke(ctx, "/token.api.Token/OnPairSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenClient) OnTokenPriceChanged(ctx context.Context, in *OnTokenPriceChangedRequest, opts ...grpc.CallOption) (*OnTokenPriceChangedResponse, error) {
	out := new(OnTokenPriceChangedResponse)
	err := c.cc.Invoke(ctx, "/token.api.Token/OnTokenPriceChanged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokenServer is the server API for Token service.
// All implementations must embed UnimplementedTokenServer
// for forward compatibility
type TokenServer interface {
	// hot页
	SubscribeHot(*SubscribeHotRequest, Token_SubscribeHotServer) error
	// 上新， 订阅
	SubscribeNewPair(*SubscribeNewPairRequest, Token_SubscribeNewPairServer) error
	// 上新，查询
	GetNewPair(context.Context, *GetNewPairRequest) (*GetNewPairResponse, error)
	// 搜索
	SearchToken(context.Context, *SearchTokenRequest) (*SearchTokenResponse, error)
	// for block-parser
	OnNewToken(context.Context, *OnNewTokenRequest) (*OnNewTokenResponse, error)
	// for block-parser
	OnPairSync(context.Context, *OnPairSyncRequest) (*OnPairSyncResponse, error)
	// for engine
	OnTokenPriceChanged(context.Context, *OnTokenPriceChangedRequest) (*OnTokenPriceChangedResponse, error)
	mustEmbedUnimplementedTokenServer()
}

// UnimplementedTokenServer must be embedded to have forward compatible implementations.
type UnimplementedTokenServer struct {
}

func (UnimplementedTokenServer) SubscribeHot(*SubscribeHotRequest, Token_SubscribeHotServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeHot not implemented")
}
func (UnimplementedTokenServer) SubscribeNewPair(*SubscribeNewPairRequest, Token_SubscribeNewPairServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeNewPair not implemented")
}
func (UnimplementedTokenServer) GetNewPair(context.Context, *GetNewPairRequest) (*GetNewPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewPair not implemented")
}
func (UnimplementedTokenServer) SearchToken(context.Context, *SearchTokenRequest) (*SearchTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchToken not implemented")
}
func (UnimplementedTokenServer) OnNewToken(context.Context, *OnNewTokenRequest) (*OnNewTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnNewToken not implemented")
}
func (UnimplementedTokenServer) OnPairSync(context.Context, *OnPairSyncRequest) (*OnPairSyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnPairSync not implemented")
}
func (UnimplementedTokenServer) OnTokenPriceChanged(context.Context, *OnTokenPriceChangedRequest) (*OnTokenPriceChangedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnTokenPriceChanged not implemented")
}
func (UnimplementedTokenServer) mustEmbedUnimplementedTokenServer() {}

// UnsafeTokenServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TokenServer will
// result in compilation errors.
type UnsafeTokenServer interface {
	mustEmbedUnimplementedTokenServer()
}

func RegisterTokenServer(s grpc.ServiceRegistrar, srv TokenServer) {
	s.RegisterService(&Token_ServiceDesc, srv)
}

func _Token_SubscribeHot_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeHotRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TokenServer).SubscribeHot(m, &tokenSubscribeHotServer{stream})
}

type Token_SubscribeHotServer interface {
	Send(*SubscribeHotResponse) error
	grpc.ServerStream
}

type tokenSubscribeHotServer struct {
	grpc.ServerStream
}

func (x *tokenSubscribeHotServer) Send(m *SubscribeHotResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Token_SubscribeNewPair_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeNewPairRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TokenServer).SubscribeNewPair(m, &tokenSubscribeNewPairServer{stream})
}

type Token_SubscribeNewPairServer interface {
	Send(*SubscribeNewPairResponse) error
	grpc.ServerStream
}

type tokenSubscribeNewPairServer struct {
	grpc.ServerStream
}

func (x *tokenSubscribeNewPairServer) Send(m *SubscribeNewPairResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Token_GetNewPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNewPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServer).GetNewPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/token.api.Token/GetNewPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServer).GetNewPair(ctx, req.(*GetNewPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Token_SearchToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServer).SearchToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/token.api.Token/SearchToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServer).SearchToken(ctx, req.(*SearchTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Token_OnNewToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnNewTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServer).OnNewToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/token.api.Token/OnNewToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServer).OnNewToken(ctx, req.(*OnNewTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Token_OnPairSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnPairSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServer).OnPairSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/token.api.Token/OnPairSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServer).OnPairSync(ctx, req.(*OnPairSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Token_OnTokenPriceChanged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnTokenPriceChangedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServer).OnTokenPriceChanged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/token.api.Token/OnTokenPriceChanged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServer).OnTokenPriceChanged(ctx, req.(*OnTokenPriceChangedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Token_ServiceDesc is the grpc.ServiceDesc for Token service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Token_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "token.api.Token",
	HandlerType: (*TokenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNewPair",
			Handler:    _Token_GetNewPair_Handler,
		},
		{
			MethodName: "SearchToken",
			Handler:    _Token_SearchToken_Handler,
		},
		{
			MethodName: "OnNewToken",
			Handler:    _Token_OnNewToken_Handler,
		},
		{
			MethodName: "OnPairSync",
			Handler:    _Token_OnPairSync_Handler,
		},
		{
			MethodName: "OnTokenPriceChanged",
			Handler:    _Token_OnTokenPriceChanged_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeHot",
			Handler:       _Token_SubscribeHot_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeNewPair",
			Handler:       _Token_SubscribeNewPair_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "token/token.proto",
}
