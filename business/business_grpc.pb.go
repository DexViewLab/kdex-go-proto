// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package businesspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BusinessClient is the client API for Business service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BusinessClient interface {
	// 有新币，给订阅的用户发邮件
	OnNewPair(ctx context.Context, in *OnNewTokenRequest, opts ...grpc.CallOption) (*OnNewTokenResponse, error)
	// 订阅某个币上新
	SubNewToken(ctx context.Context, in *SubNewTokenRequest, opts ...grpc.CallOption) (*SubNewTokenResponse, error)
	// 查询某个用户订阅信息
	GetUserSubNewTokens(ctx context.Context, in *GetUserSubNewTokensRequest, opts ...grpc.CallOption) (*GetUserSubNewTokensResponse, error)
}

type businessClient struct {
	cc grpc.ClientConnInterface
}

func NewBusinessClient(cc grpc.ClientConnInterface) BusinessClient {
	return &businessClient{cc}
}

func (c *businessClient) OnNewPair(ctx context.Context, in *OnNewTokenRequest, opts ...grpc.CallOption) (*OnNewTokenResponse, error) {
	out := new(OnNewTokenResponse)
	err := c.cc.Invoke(ctx, "/business.api.Business/OnNewPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessClient) SubNewToken(ctx context.Context, in *SubNewTokenRequest, opts ...grpc.CallOption) (*SubNewTokenResponse, error) {
	out := new(SubNewTokenResponse)
	err := c.cc.Invoke(ctx, "/business.api.Business/SubNewToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessClient) GetUserSubNewTokens(ctx context.Context, in *GetUserSubNewTokensRequest, opts ...grpc.CallOption) (*GetUserSubNewTokensResponse, error) {
	out := new(GetUserSubNewTokensResponse)
	err := c.cc.Invoke(ctx, "/business.api.Business/GetUserSubNewTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BusinessServer is the server API for Business service.
// All implementations must embed UnimplementedBusinessServer
// for forward compatibility
type BusinessServer interface {
	// 有新币，给订阅的用户发邮件
	OnNewPair(context.Context, *OnNewTokenRequest) (*OnNewTokenResponse, error)
	// 订阅某个币上新
	SubNewToken(context.Context, *SubNewTokenRequest) (*SubNewTokenResponse, error)
	// 查询某个用户订阅信息
	GetUserSubNewTokens(context.Context, *GetUserSubNewTokensRequest) (*GetUserSubNewTokensResponse, error)
	mustEmbedUnimplementedBusinessServer()
}

// UnimplementedBusinessServer must be embedded to have forward compatible implementations.
type UnimplementedBusinessServer struct {
}

func (UnimplementedBusinessServer) OnNewPair(context.Context, *OnNewTokenRequest) (*OnNewTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnNewPair not implemented")
}
func (UnimplementedBusinessServer) SubNewToken(context.Context, *SubNewTokenRequest) (*SubNewTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubNewToken not implemented")
}
func (UnimplementedBusinessServer) GetUserSubNewTokens(context.Context, *GetUserSubNewTokensRequest) (*GetUserSubNewTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSubNewTokens not implemented")
}
func (UnimplementedBusinessServer) mustEmbedUnimplementedBusinessServer() {}

// UnsafeBusinessServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BusinessServer will
// result in compilation errors.
type UnsafeBusinessServer interface {
	mustEmbedUnimplementedBusinessServer()
}

func RegisterBusinessServer(s grpc.ServiceRegistrar, srv BusinessServer) {
	s.RegisterService(&Business_ServiceDesc, srv)
}

func _Business_OnNewPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnNewTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServer).OnNewPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/business.api.Business/OnNewPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServer).OnNewPair(ctx, req.(*OnNewTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Business_SubNewToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubNewTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServer).SubNewToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/business.api.Business/SubNewToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServer).SubNewToken(ctx, req.(*SubNewTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Business_GetUserSubNewTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserSubNewTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServer).GetUserSubNewTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/business.api.Business/GetUserSubNewTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServer).GetUserSubNewTokens(ctx, req.(*GetUserSubNewTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Business_ServiceDesc is the grpc.ServiceDesc for Business service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Business_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "business.api.Business",
	HandlerType: (*BusinessServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnNewPair",
			Handler:    _Business_OnNewPair_Handler,
		},
		{
			MethodName: "SubNewToken",
			Handler:    _Business_SubNewToken_Handler,
		},
		{
			MethodName: "GetUserSubNewTokens",
			Handler:    _Business_GetUserSubNewTokens_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "business/business.proto",
}
